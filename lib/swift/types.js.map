{"version":3,"sources":["../../src/swift/types.js"],"names":["typeNameFromGraphQLType","builtInScalarMap","name","context","type","bareTypeName","isOptional","ofType","undefined","typeName","passthroughCustomScalars"],"mappings":";;;;;QA6BgBA,uB,GAAAA,uB;;AA7BhB;;AAOA;;AAEA;;AAYA,MAAMC,mBAAmB;AACvB,GAAC,uBAAcC,IAAf,GAAsB,QADC;AAEvB,GAAC,oBAAWA,IAAZ,GAAmB,KAFI;AAGvB,GAAC,sBAAaA,IAAd,GAAqB,QAHE;AAIvB,GAAC,wBAAeA,IAAhB,GAAuB,MAJA;AAKvB,GAAC,mBAAUA,IAAX,GAAkB;AALK,CAAzB;;AAQO,SAASF,uBAAT,CAAiCG,OAAjC,EAA0CC,IAA1C,EAAgDC,YAAhD,EAA8DC,UAA9D,EAA0E;AAC/E,MAAIF,uCAAJ,EAAoC;AAClC,WAAOJ,wBAAwBG,OAAxB,EAAiCC,KAAKG,MAAtC,EAA8CF,YAA9C,EAA4DC,cAAc,KAA1E,CAAP;AACD,GAFD,MAEO,IAAIA,eAAeE,SAAnB,EAA8B;AACnCF,iBAAa,IAAb;AACD;;AAED,MAAIG,QAAJ;AACA,MAAIL,oCAAJ,EAAiC;AAC/BK,eAAW,MAAMT,wBAAwBG,OAAxB,EAAiCC,KAAKG,MAAtC,EAA8CF,YAA9C,CAAN,GAAoE,GAA/E;AACD,GAFD,MAEO,IAAID,0CAAJ,EAAuC;AAC5CK,eAAWR,iBAAiBG,KAAKF,IAAtB,MAAgCC,QAAQO,wBAAR,GAAmCN,KAAKF,IAAxC,yBAAhC,CAAX;AACD,GAFM,MAEA;AACLO,eAAWJ,gBAAgBD,KAAKF,IAAhC;AACD;;AAED,SAAOI,aAAaG,WAAW,GAAxB,GAA8BA,QAArC;AACD","file":"types.js","sourcesContent":["import {\r\n  join,\r\n  block,\r\n  wrap,\r\n  indent\r\n} from '../utilities/printing';\r\n\r\nimport { camelCase } from 'change-case';\r\n\r\nimport {\r\n  GraphQLString,\r\n  GraphQLInt,\r\n  GraphQLFloat,\r\n  GraphQLBoolean,\r\n  GraphQLID,\r\n  GraphQLList,\r\n  GraphQLNonNull,\r\n  GraphQLScalarType,\r\n  GraphQLEnumType\r\n} from 'graphql';\r\n\r\nconst builtInScalarMap = {\r\n  [GraphQLString.name]: 'String',\r\n  [GraphQLInt.name]: 'Int',\r\n  [GraphQLFloat.name]: 'Double',\r\n  [GraphQLBoolean.name]: 'Bool',\r\n  [GraphQLID.name]: 'GraphQLID',\r\n}\r\n\r\nexport function typeNameFromGraphQLType(context, type, bareTypeName, isOptional) {\r\n  if (type instanceof GraphQLNonNull) {\r\n    return typeNameFromGraphQLType(context, type.ofType, bareTypeName, isOptional || false)\r\n  } else if (isOptional === undefined) {\r\n    isOptional = true;\r\n  }\r\n\r\n  let typeName;\r\n  if (type instanceof GraphQLList) {\r\n    typeName = '[' + typeNameFromGraphQLType(context, type.ofType, bareTypeName) + ']';\r\n  } else if (type instanceof GraphQLScalarType) {\r\n    typeName = builtInScalarMap[type.name] || (context.passthroughCustomScalars ? type.name: GraphQLString);\r\n  } else {\r\n    typeName = bareTypeName || type.name;\r\n  }\r\n\r\n  return isOptional ? typeName + '?' : typeName;\r\n}\r\n"]}