{"version":3,"sources":["../../src/swift/codeGeneration.js"],"names":["generateSource","classDeclarationForOperation","initializerDeclarationForProperties","structDeclarationForFragment","structDeclarationForSelectionSet","initializationForProperty","dictionaryLiteralForFieldArguments","propertiesFromFields","propertyFromField","structNameForProperty","typeNameForFragmentName","possibleTypesForType","typeDeclarationForGraphQLType","context","generator","printOnNewline","printNewline","typesUsed","forEach","type","operations","operation","fragments","fragment","output","operationName","operationType","variables","fields","fragmentsReferenced","source","className","protocol","modifiers","adoptedProtocols","withIndent","length","print","properties","map","name","propertyName","typeName","isOptional","ofType","printNewlineIfNeeded","withinBlock","structName","fragmentName","typeCondition","inlineFragments","fragmentSpreads","parentType","possibleTypes","beforeClosure","String","fragmentProperties","isProperSuperType","schema","bareTypeName","inlineFragmentProperties","inlineFragment","property","filter","isComposite","responseName","fieldName","fieldArgs","args","isList","methodName","fieldInitArgs","expressionFromValue","value","kind","variableName","Array","isArray","key","arg","field","isConditional","bareType","singularize","undefined","getPossibleTypes","enumerationDeclaration","structDeclarationForInputObjectType","description","values","getValues","getFields"],"mappings":"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","file":"codeGeneration.js","sourcesContent":["import {\r\n  GraphQLError,\r\n  getNamedType,\r\n  isCompositeType,\r\n  isAbstractType,\r\n  isEqualType,\r\n  GraphQLScalarType,\r\n  GraphQLEnumType,\r\n  GraphQLList,\r\n  GraphQLNonNull,\r\n  GraphQLID,\r\n  GraphQLInputObjectType\r\n} from 'graphql'\r\n\r\nimport  { isTypeProperSuperTypeOf } from '../utilities/graphql'\r\n\r\nimport { camelCase, pascalCase } from 'change-case';\r\nimport Inflector from 'inflected';\r\n\r\nimport {\r\n  join,\r\n  wrap,\r\n} from '../utilities/printing';\r\n\r\nimport {\r\n  classDeclaration,\r\n  structDeclaration,\r\n  propertyDeclaration,\r\n  propertyDeclarations,\r\n  escapeIdentifierIfNeeded\r\n} from './language';\r\n\r\nimport { escapedString, multilineString, literalFromValue } from './values';\r\n\r\nimport {\r\n  typeNameFromGraphQLType,\r\n} from './types';\r\n\r\nimport CodeGenerator from '../utilities/CodeGenerator';\r\n\r\nexport function generateSource(context) {\r\n  const generator = new CodeGenerator(context);\r\n\r\n  generator.printOnNewline('//  This file was automatically generated and should not be edited.');\r\n  generator.printNewline();\r\n  generator.printOnNewline('import Apollo');\r\n\r\n  context.typesUsed.forEach(type => {\r\n    typeDeclarationForGraphQLType(generator, type);\r\n  });\r\n\r\n  Object.values(context.operations).forEach(operation => {\r\n    classDeclarationForOperation(generator, operation);\r\n  });\r\n\r\n  Object.values(context.fragments).forEach(fragment => {\r\n    structDeclarationForFragment(generator, fragment);\r\n  });\r\n\r\n  return generator.output;\r\n}\r\n\r\nexport function classDeclarationForOperation(\r\n  generator,\r\n  {\r\n    operationName,\r\n    operationType,\r\n    variables,\r\n    fields,\r\n    fragmentsReferenced,\r\n    source,\r\n  }\r\n) {\r\n\r\n  let className;\r\n  let protocol;\r\n\r\n  switch (operationType) {\r\n    case 'query':\r\n      className = `${pascalCase(operationName)}Query`;\r\n      protocol = 'GraphQLQuery';\r\n      break;\r\n    case 'mutation':\r\n      className = `${pascalCase(operationName)}Mutation`;\r\n      protocol = 'GraphQLMutation';\r\n      break;\r\n    default:\r\n      throw new GraphQLError(`Unsupported operation type \"${operationType}\"`);\r\n  }\r\n\r\n  classDeclaration(generator, {\r\n    className,\r\n    modifiers: ['public', 'final'],\r\n    adoptedProtocols: [protocol]\r\n  }, () => {\r\n    if (source) {\r\n      generator.printOnNewline('public static let operationDefinition =');\r\n      generator.withIndent(() => {\r\n        multilineString(generator, source);\r\n      });\r\n    }\r\n\r\n    if (fragmentsReferenced && fragmentsReferenced.length > 0) {\r\n      generator.printOnNewline('public static let queryDocument = operationDefinition');\r\n      fragmentsReferenced.forEach(fragment => {\r\n        generator.print(`.appending(${typeNameForFragmentName(fragment)}.fragmentDefinition)`)\r\n      });\r\n    }\r\n\r\n    if (variables && variables.length > 0) {\r\n      const properties = variables.map(({ name, type }) => {\r\n        const propertyName = escapeIdentifierIfNeeded(camelCase(name));\r\n        const typeName = typeNameFromGraphQLType(generator.context, type);\r\n        const isOptional = !(type instanceof GraphQLNonNull || type.ofType instanceof GraphQLNonNull);\r\n        return { name, propertyName, type, typeName, isOptional };\r\n      });\r\n      generator.printNewlineIfNeeded();\r\n      propertyDeclarations(generator, properties);\r\n      generator.printNewlineIfNeeded();\r\n      initializerDeclarationForProperties(generator, properties);\r\n      generator.printNewlineIfNeeded();\r\n      generator.printOnNewline(`public var variables: GraphQLMap?`);\r\n      generator.withinBlock(() => {\r\n        generator.printOnNewline(wrap(\r\n          `return [`,\r\n          join(properties.map(({ name, propertyName }) => `\"${name}\": ${propertyName}`), ', '),\r\n          `]`\r\n        ));\r\n      });\r\n    } else {\r\n      initializerDeclarationForProperties(generator, []);\r\n    }\r\n\r\n    structDeclarationForSelectionSet(\r\n      generator,\r\n      {\r\n        structName: \"Data\",\r\n        fields\r\n      }\r\n    );\r\n  });\r\n}\r\n\r\nexport function initializerDeclarationForProperties(generator, properties) {\r\n  generator.printOnNewline(`public init`);\r\n  generator.print('(');\r\n  generator.print(join(properties.map(({ propertyName, type, typeName, isOptional }) =>\r\n    join([\r\n      `${propertyName}: ${typeName}`,\r\n      isOptional && ' = nil'\r\n    ])\r\n  ), ', '));\r\n  generator.print(')');\r\n\r\n  generator.withinBlock(() => {\r\n    properties.forEach(({ propertyName }) => {\r\n      generator.printOnNewline(`self.${propertyName} = ${propertyName}`);\r\n    });\r\n  });\r\n}\r\n\r\nexport function structDeclarationForFragment(\r\n  generator,\r\n  {\r\n    fragmentName,\r\n    typeCondition,\r\n    fields,\r\n    inlineFragments,\r\n    fragmentSpreads,\r\n    source\r\n  }\r\n) {\r\n  const structName = pascalCase(fragmentName);\r\n\r\n  structDeclarationForSelectionSet(generator, {\r\n    structName,\r\n    adoptedProtocols: ['GraphQLNamedFragment'],\r\n    parentType: typeCondition,\r\n    possibleTypes: possibleTypesForType(generator.context, typeCondition),\r\n    fields,\r\n    fragmentSpreads,\r\n    inlineFragments\r\n  }, () => {\r\n    if (source) {\r\n      generator.printOnNewline('public static let fragmentDefinition =');\r\n      generator.withIndent(() => {\r\n        multilineString(generator, source);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport function structDeclarationForSelectionSet(\r\n  generator,\r\n  {\r\n    structName,\r\n    adoptedProtocols = ['GraphQLMappable'],\r\n    parentType,\r\n    possibleTypes,\r\n    fields,\r\n    fragmentSpreads,\r\n    inlineFragments\r\n  },\r\n  beforeClosure\r\n) {\r\n  structDeclaration(generator, { structName, adoptedProtocols }, () => {\r\n    if (beforeClosure) {\r\n      beforeClosure();\r\n    }\r\n\r\n    if (possibleTypes) {\r\n      generator.printNewlineIfNeeded();\r\n      generator.printOnNewline('public static let possibleTypes = [');\r\n      generator.print(join(possibleTypes.map(type => `\"${String(type)}\"`), ', '));\r\n      generator.print(']');\r\n    }\r\n\r\n    const properties = fields && propertiesFromFields(generator.context, fields);\r\n\r\n    const fragmentProperties = fragmentSpreads && fragmentSpreads.map(fragmentName => {\r\n      const fragment = generator.context.fragments[fragmentName];\r\n      if (!fragment) {\r\n        throw new GraphQLError(`Cannot find fragment \"${fragmentName}\"`);\r\n      }\r\n      const propertyName = camelCase(fragmentName);\r\n      const typeName = typeNameForFragmentName(fragmentName);\r\n      const isProperSuperType = isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);\r\n      return { propertyName, typeName, bareTypeName: typeName, isProperSuperType };\r\n    });\r\n\r\n    const inlineFragmentProperties = inlineFragments && inlineFragments.map(inlineFragment => {\r\n      const bareTypeName = 'As' + pascalCase(String(inlineFragment.typeCondition));\r\n      const propertyName = camelCase(bareTypeName);\r\n      const typeName = bareTypeName + '?'\r\n      return { ...inlineFragment, propertyName, typeName, bareTypeName };\r\n    });\r\n\r\n    generator.printNewlineIfNeeded();\r\n\r\n    if (parentType) {\r\n      generator.printOnNewline('public let __typename: String');\r\n    }\r\n\r\n    propertyDeclarations(generator, properties);\r\n\r\n    if (fragmentProperties && fragmentProperties.length > 0) {\r\n      generator.printNewlineIfNeeded();\r\n      propertyDeclaration(generator, { propertyName: 'fragments', typeName: 'Fragments' })\r\n    }\r\n\r\n    if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\r\n      generator.printNewlineIfNeeded();\r\n      propertyDeclarations(generator, inlineFragmentProperties);\r\n    }\r\n\r\n    generator.printNewlineIfNeeded();\r\n    generator.printOnNewline('public init(reader: GraphQLResultReader) throws');\r\n    generator.withinBlock(() => {\r\n      if (parentType) {\r\n        generator.printOnNewline(`__typename = try reader.value(for: Field(responseName: \"__typename\"))`);\r\n      }\r\n\r\n      if (properties) {\r\n        properties.forEach(property => initializationForProperty(generator, property));\r\n      }\r\n\r\n      if (fragmentProperties && fragmentProperties.length > 0) {\r\n        generator.printNewlineIfNeeded();\r\n        fragmentProperties.forEach(({ propertyName, typeName, bareTypeName, isProperSuperType }) => {\r\n          generator.printOnNewline(`let ${propertyName} = try ${typeName}(reader: reader`);\r\n          if (isProperSuperType) {\r\n            generator.print(')');\r\n          } else {\r\n            generator.print(`, ifTypeMatches: __typename)`);\r\n          }\r\n        });\r\n        generator.printOnNewline(`fragments = Fragments(`);\r\n        generator.print(join(fragmentSpreads.map(fragmentName => {\r\n          const propertyName = camelCase(fragmentName);\r\n          return `${propertyName}: ${propertyName}`;\r\n        }), ', '));\r\n        generator.print(')');\r\n      }\r\n\r\n      if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\r\n        generator.printNewlineIfNeeded();\r\n        inlineFragmentProperties.forEach(({ propertyName, typeName, bareTypeName }) => {\r\n          generator.printOnNewline(`${propertyName} = try ${bareTypeName}(reader: reader, ifTypeMatches: __typename)`);\r\n        });\r\n      }\r\n    });\r\n\r\n    if (fragmentProperties && fragmentProperties.length > 0) {\r\n      structDeclaration(\r\n        generator,\r\n        {\r\n          structName: 'Fragments'\r\n        },\r\n        () => {\r\n          fragmentProperties.forEach(({ propertyName, typeName, isProperSuperType }) => {\r\n            if (!isProperSuperType) {\r\n              typeName += '?';\r\n            }\r\n            propertyDeclaration(generator, { propertyName, typeName });\r\n          })\r\n        }\r\n      );\r\n    }\r\n\r\n    if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\r\n      inlineFragmentProperties.forEach(property => {\r\n        structDeclarationForSelectionSet(\r\n          generator,\r\n          {\r\n            structName: property.bareTypeName,\r\n            parentType: property.typeCondition,\r\n            possibleTypes: possibleTypesForType(generator.context, property.typeCondition),\r\n            adoptedProtocols: ['GraphQLConditionalFragment'],\r\n            fields: property.fields,\r\n            fragmentSpreads: property.fragmentSpreads\r\n          }\r\n        );\r\n      });\r\n    }\r\n\r\n    if (properties) {\r\n      properties.filter(property => property.isComposite).forEach(property => {\r\n        structDeclarationForSelectionSet(\r\n          generator,\r\n          {\r\n            structName: structNameForProperty(property),\r\n            parentType: getNamedType(property.type),\r\n            fields: property.fields,\r\n            fragmentSpreads: property.fragmentSpreads,\r\n            inlineFragments: property.inlineFragments\r\n          }\r\n        );\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nexport function initializationForProperty(generator, { propertyName, responseName, fieldName, args: fieldArgs, type, isOptional }) {\r\n  const isList = type instanceof GraphQLList || type.ofType instanceof GraphQLList;\r\n\r\n  const methodName = isOptional ? (isList ? 'optionalList' : 'optionalValue') : (isList ? 'list' : 'value');\r\n\r\n  const fieldInitArgs = join([\r\n    `responseName: \"${responseName}\"`,\r\n    responseName != fieldName ? `fieldName: \"${fieldName}\"` : null,\r\n    fieldArgs && fieldArgs.length && `arguments: ${dictionaryLiteralForFieldArguments(fieldArgs)}`\r\n  ], ', ');\r\n  const args = [`for: Field(${fieldInitArgs})`];\r\n\r\n  generator.printOnNewline(`${propertyName} = try reader.${methodName}(${ join(args, ', ') })`);\r\n}\r\n\r\nexport function dictionaryLiteralForFieldArguments(args) {\r\n  function expressionFromValue(value) {\r\n    if (value.kind === 'Variable') {\r\n      return `reader.variables[\"${value.variableName}\"]`;\r\n    } else if (Array.isArray(value)) {\r\n      return wrap('[', join(value.map(expressionFromValue), ', '), ']');\r\n    } else if (typeof value === 'object') {\r\n      return wrap('[', join(Object.entries(value).map(([key, value]) => {\r\n        return `\"${key}\": ${expressionFromValue(value)}`;\r\n      }), ', '), ']');\r\n    } else {\r\n      return JSON.stringify(value);\r\n    }\r\n  }\r\n\r\n  return wrap('[', join(args.map(arg => {\r\n    return `\"${arg.name}\": ${expressionFromValue(arg.value)}`;\r\n  }), ', '), ']');\r\n}\r\n\r\nexport function propertiesFromFields(context, fields) {\r\n  return fields.map(field => propertyFromField(context, field));\r\n}\r\n\r\nexport function propertyFromField(context, field) {\r\n  const name = field.name || field.responseName;\r\n  const propertyName = escapeIdentifierIfNeeded(camelCase(name));\r\n\r\n  const type = field.type;\r\n  const isOptional = field.isConditional || !(type instanceof GraphQLNonNull);\r\n  const bareType = getNamedType(type);\r\n\r\n  if (isCompositeType(bareType)) {\r\n    const bareTypeName = escapeIdentifierIfNeeded(pascalCase(Inflector.singularize(name)));\r\n    const typeName = typeNameFromGraphQLType(context, type, bareTypeName, isOptional);\r\n    return { ...field, propertyName, typeName, bareTypeName, isOptional, isComposite: true };\r\n  } else {\r\n    const typeName = typeNameFromGraphQLType(context, type, undefined, isOptional);\r\n    return { ...field, propertyName, typeName, isOptional, isComposite: false };\r\n  }\r\n}\r\n\r\nexport function structNameForProperty(property) {\r\n  return pascalCase(Inflector.singularize(property.responseName));\r\n}\r\n\r\nexport function typeNameForFragmentName(fragmentName) {\r\n  return pascalCase(fragmentName);\r\n}\r\n\r\nexport function possibleTypesForType(context, type) {\r\n  if (isAbstractType(type)) {\r\n    return context.schema.getPossibleTypes(type);\r\n  } else {\r\n    return [type];\r\n  }\r\n}\r\n\r\nexport function typeDeclarationForGraphQLType(generator, type) {\r\n  if (type instanceof GraphQLEnumType) {\r\n    enumerationDeclaration(generator, type);\r\n  } else if (type instanceof GraphQLInputObjectType) {\r\n    structDeclarationForInputObjectType(generator, type);\r\n  }\r\n}\r\n\r\nfunction enumerationDeclaration(generator, type) {\r\n  const { name, description } = type;\r\n  const values = type.getValues();\r\n\r\n  generator.printNewlineIfNeeded();\r\n  generator.printOnNewline(description && `/// ${description}`);\r\n  generator.printOnNewline(`public enum ${name}: String`);\r\n  generator.withinBlock(() => {\r\n    values.forEach(value =>\r\n      generator.printOnNewline(`case ${camelCase(value.name)} = \"${value.value}\"${wrap(' /// ', value.description)}`)\r\n    );\r\n  });\r\n  generator.printNewline();\r\n  generator.printOnNewline(`extension ${name}: JSONDecodable, JSONEncodable {}`);\r\n}\r\n\r\nfunction structDeclarationForInputObjectType(generator, type) {\r\n  const { name: structName, description } = type;\r\n  const adoptedProtocols = ['GraphQLMapConvertible'];\r\n  const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));\r\n\r\n  structDeclaration(generator, { structName, description, adoptedProtocols }, () => {\r\n    generator.printOnNewline(`public var graphQLMap: GraphQLMap`);\r\n\r\n    generator.printNewlineIfNeeded();\r\n    generator.printOnNewline(`public init`);\r\n    generator.print('(');\r\n    generator.print(join(properties.map(({ propertyName, type, typeName, isOptional }) =>\r\n      join([\r\n        `${propertyName}: ${typeName}`,\r\n        isOptional && ' = nil'\r\n      ])\r\n    ), ', '));\r\n    generator.print(')');\r\n\r\n    generator.withinBlock(() => {\r\n      generator.printOnNewline(wrap(\r\n        `graphQLMap = [`,\r\n        join(properties.map(({ name, propertyName }) => `\"${name}\": ${propertyName}`), ', ') || ':',\r\n        `]`\r\n      ));\r\n    });\r\n  });\r\n}\r\n"]}