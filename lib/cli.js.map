{"version":3,"sources":["../src/cli.js"],"names":["on","error","handleError","exit","command","output","demand","describe","default","normalize","coerce","resolve","header","alias","type","arg","additionalHeaders","split","name","value","insecure","argv","outputPath","server","schema","target","choices","inputPaths","input","map","options","passthroughCustomScalars","fail","message","help","version","strict"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;AAEA;;;;AAEA;AACA,kBAAQA,EAAR,CAAW,oBAAX,EAAkCC,KAAD,IAAW;AAAE,QAAMA,KAAN;AAAa,CAA3D;;AAEA,kBAAQD,EAAR,CAAW,mBAAX,EAAgCE,WAAhC;;AAEA,SAASA,WAAT,CAAqBD,KAArB,EAA4B;AAC1B,wBAASA,KAAT;AACA,oBAAQE,IAAR,CAAa,CAAb;AACD;;AAED,gBACGC,OADH,CAEI,0BAFJ,EAGI,yCAHJ,EAII;AACEC,UAAQ;AACNC,YAAQ,IADF;AAENC,cAAU,qCAFJ;AAGNC,aAAS,aAHH;AAINC,eAAW,IAJL;AAKNC,YAAQ,eAAKC;AALP,GADV;AAQEC,UAAQ;AACNC,WAAO,GADD;AAENN,cAAU,oFAFJ;AAGNO,UAAM,OAHA;AAINJ,YAASK,GAAD,IAAS;AACf,UAAIC,oBAAoB,EAAxB;AACA,WAAK,MAAMJ,MAAX,IAAqBG,GAArB,EAA0B;AAAA,4BACFH,OAAOK,KAAP,CAAa,SAAb,CADE;AAAA;;AAAA,cACjBC,IADiB;AAAA,cACXC,KADW;;AAExB,YAAI,EAAED,QAAQC,KAAV,CAAJ,EAAsB;AACpB,gBAAM,sBAAc,8CAAd,CAAN;AACD;AACDH,0BAAkBE,IAAlB,IAA0BC,KAA1B;AACD;AACD,aAAOH,iBAAP;AACD;AAdK,GARV;AAwBEI,YAAU;AACRP,WAAO,GADC;AAERN,cAAU,gDAFF;AAGRO,UAAM;AAHE;AAxBZ,CAJJ;AAAA,6CAkCI,WAAMO,IAAN,EAAc;AACZ,UAAMC,aAAa,eAAKX,OAAL,CAAaU,KAAKhB,MAAlB,CAAnB;AACA,UAAMW,oBAAoBK,KAAKT,MAA/B;AACA,UAAM,sBAAeS,KAAKE,MAApB,EAA4BD,UAA5B,EAAwCN,iBAAxC,EAA2DK,KAAKD,QAAhE,CAAN;AACD,GAtCL;;AAAA;AAAA;AAAA;AAAA,MAwCGhB,OAxCH,CAyCI,qBAzCJ,EA0CI,yDA1CJ,EA2CI;AACEoB,UAAQ;AACNlB,YAAQ,IADF;AAENC,cAAU,6BAFJ;AAGNC,aAAS,aAHH;AAINC,eAAW,IAJL;AAKNC,YAAQ,eAAKC;AALP,GADV;AAQEN,UAAQ;AACNE,cAAU,0CADJ;AAENE,eAAW,IAFL;AAGNC,YAAQ,eAAKC;AAHP,GARV;AAaEc,UAAQ;AACNnB,YAAQ,KADF;AAENC,cAAU,iCAFJ;AAGNmB,aAAS,CAAC,OAAD,EAAU,MAAV,EAAkB,IAAlB,EAAwB,YAAxB,EAAsC,MAAtC,CAHH;AAINlB,aAAS;AAJH,GAbV;AAmBE,gCAA8B;AAC5BF,YAAQ,KADoB;AAE5BC,cAAU,wDAFkB;AAG5BC,aAAS;AAHmB;AAnBhC,CA3CJ,EAoEIa,QAAQ;AACN,QAAMM,aAAaN,KAAKO,KAAL,CAAWC,GAAX,CAAeD,SAAS,eAAKjB,OAAL,CAAaiB,KAAb,CAAxB,CAAnB;AACA,QAAME,UAAU,EAAEC,0BAA0BV,KAAK,4BAAL,CAA5B,EAAhB;AACA,kBAASM,UAAT,EAAqBN,KAAKG,MAA1B,EAAkCH,KAAKhB,MAAvC,EAA+CgB,KAAKI,MAApD,EAA4DK,OAA5D;AACD,CAxEL,EA0EGE,IA1EH,CA0EQ,UAASC,OAAT,EAAkBhC,KAAlB,EAAyB;AAC7BC,cAAYD,QAAQA,KAAR,GAAgB,sBAAcgC,OAAd,CAA5B;AACD,CA5EH,EA6EGC,IA7EH,GA8EGC,OA9EH,GA+EGC,MA/EH,GAgFGf,IAhFH","file":"cli.js","sourcesContent":["\r\n\r\nimport process from 'process';\r\nimport path from 'path';\r\nimport yargs from 'yargs';\r\n\r\nimport { downloadSchema, generate } from '.';\r\nimport { ToolError, logError } from './errors'\r\n\r\nimport 'source-map-support/register'\r\n\r\n// Make sure unhandled errors in async code are propagated correctly\r\nprocess.on('unhandledRejection', (error) => { throw error });\r\n\r\nprocess.on('uncaughtException', handleError);\r\n\r\nfunction handleError(error) {\r\n  logError(error);\r\n  process.exit(1);\r\n}\r\n\r\nyargs\r\n  .command(\r\n    'download-schema <server>',\r\n    'Download a GraphQL schema from a server',\r\n    {\r\n      output: {\r\n        demand: true,\r\n        describe: 'Output path for GraphQL schema file',\r\n        default: 'schema.json',\r\n        normalize: true,\r\n        coerce: path.resolve,\r\n      },\r\n      header: {\r\n        alias: 'H',\r\n        describe: 'Additional header to send to the server as part of the introspection query request',\r\n        type: 'array',\r\n        coerce: (arg) => {\r\n          let additionalHeaders = {};\r\n          for (const header of arg) {\r\n            const [name, value] = header.split(/\\s*:\\s*/);\r\n            if (!(name && value)) {\r\n              throw new ToolError('Headers should be specified as \"Name: Value\"');\r\n            }\r\n            additionalHeaders[name] = value;\r\n          }\r\n          return additionalHeaders;\r\n        }\r\n      },\r\n      insecure: {\r\n        alias: 'K',\r\n        describe: 'Allows \"insecure\" SSL connection to the server',\r\n        type: 'boolean'\r\n      }\r\n    },\r\n    async argv => {\r\n      const outputPath = path.resolve(argv.output);\r\n      const additionalHeaders = argv.header;\r\n      await downloadSchema(argv.server, outputPath, additionalHeaders, argv.insecure);\r\n    }\r\n  )\r\n  .command(\r\n    'generate [input...]',\r\n    'Generate code from a GraphQL schema and query documents',\r\n    {\r\n      schema: {\r\n        demand: true,\r\n        describe: 'Path to GraphQL schema file',\r\n        default: 'schema.json',\r\n        normalize: true,\r\n        coerce: path.resolve,\r\n      },\r\n      output: {\r\n        describe: 'Output directory for the generated files',\r\n        normalize: true,\r\n        coerce: path.resolve,\r\n      },\r\n      target: {\r\n        demand: false,\r\n        describe: 'Code generation target language',\r\n        choices: ['swift', 'json', 'ts', 'typescript', 'flow'],\r\n        default: 'swift'\r\n      },\r\n      \"passthrough-custom-scalars\": {\r\n        demand: false,\r\n        describe: \"Don't attempt to map custom scalars [temporary option]\",\r\n        default: false\r\n      }\r\n    },\r\n    argv => {\r\n      const inputPaths = argv.input.map(input => path.resolve(input));\r\n      const options = { passthroughCustomScalars: argv[\"passthrough-custom-scalars\"] };\r\n      generate(inputPaths, argv.schema, argv.output, argv.target, options);\r\n    },\r\n  )\r\n  .fail(function(message, error) {\r\n    handleError(error ? error : new ToolError(message));\r\n  })\r\n  .help()\r\n  .version()\r\n  .strict()\r\n  .argv\r\n"]}