{"version":3,"sources":["../../src/flow/codeGeneration.js"],"names":["generateSource","typeDeclarationForGraphQLType","interfaceVariablesDeclarationForOperation","typeDeclarationForOperation","typeDeclarationForFragment","propertiesFromFields","propertyFromField","propertyDeclarations","context","generator","printOnNewline","typesUsed","forEach","type","operations","operation","fragments","output","enumerationDeclaration","structDeclarationForInputObjectType","name","description","values","getValues","printNewlineIfNeeded","nValues","length","value","i","printNewline","interfaceName","properties","getFields","interfaceNameFromOperation","operationName","operationType","variables","fields","fragmentsReferenced","source","fragmentSpreads","extendTypes","map","f","fragmentName","typeCondition","inlineFragments","concat","fragment","forceNullable","field","fieldName","fieldType","responseName","propertyName","property","namedType","bareTypeName","singularize","typeName","isArray","isNullable","isComposite","inInterface"],"mappings":"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","file":"codeGeneration.js","sourcesContent":["import {\r\n  GraphQLError,\r\n  getNamedType,\r\n  isCompositeType,\r\n  isAbstractType,\r\n  isEqualType,\r\n  GraphQLScalarType,\r\n  GraphQLEnumType,\r\n  GraphQLList,\r\n  GraphQLNonNull,\r\n  GraphQLID,\r\n  GraphQLInputObjectType\r\n} from 'graphql'\r\n\r\nimport  { isTypeProperSuperTypeOf } from '../utilities/graphql';\r\n\r\nimport { camelCase, pascalCase } from 'change-case';\r\nimport Inflector from 'inflected';\r\n\r\nimport {\r\n  join,\r\n  wrap,\r\n} from '../utilities/printing';\r\n\r\nimport CodeGenerator from '../utilities/CodeGenerator';\r\n\r\nimport {\r\n  typeDeclaration,\r\n  propertyDeclaration,\r\n} from './language';\r\n\r\nimport {\r\n  typeNameFromGraphQLType,\r\n} from './types';\r\n\r\nexport function generateSource(context) {\r\n  const generator = new CodeGenerator(context);\r\n\r\n  generator.printOnNewline('/* @flow */');\r\n  generator.printOnNewline('//  This file was automatically generated and should not be edited.');\r\n  typeDeclarationForGraphQLType(context.typesUsed.forEach(type =>\r\n    typeDeclarationForGraphQLType(generator, type)\r\n  ));\r\n  Object.values(context.operations).forEach(operation => {\r\n    interfaceVariablesDeclarationForOperation(generator, operation);\r\n    typeDeclarationForOperation(generator, operation);\r\n  });\r\n  Object.values(context.fragments).forEach(operation =>\r\n    typeDeclarationForFragment(generator, operation)\r\n  );\r\n\r\n  return generator.output;\r\n}\r\n\r\nexport function typeDeclarationForGraphQLType(generator, type) {\r\n  if (type instanceof GraphQLEnumType) {\r\n    enumerationDeclaration(generator, type);\r\n  } else if (type instanceof GraphQLInputObjectType) {\r\n    structDeclarationForInputObjectType(generator, type);\r\n  }\r\n}\r\n\r\nfunction enumerationDeclaration(generator, type) {\r\n  const { name, description } = type;\r\n  const values = type.getValues();\r\n\r\n  generator.printNewlineIfNeeded();\r\n  generator.printOnNewline(description && `// ${description}`);\r\n  generator.printOnNewline(`export type ${name} =`);\r\n  const nValues = values.length;\r\n  values.forEach((value, i) => \r\n    generator.printOnNewline(`  \"${value.value}\"${i === nValues-1 ? ';' : ' |'}${wrap(' // ', value.description)}`)\r\n  );\r\n  generator.printNewline();\r\n}\r\n\r\nfunction structDeclarationForInputObjectType(\r\n  generator,\r\n  type\r\n  ) {\r\n  const interfaceName = pascalCase(type.name);\r\n  typeDeclaration(generator, {\r\n    interfaceName,\r\n  }, () => {\r\n    const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));\r\n    propertyDeclarations(generator, properties, true);\r\n  });\r\n}\r\n\r\nfunction interfaceNameFromOperation({operationName, operationType}) {\r\n  switch (operationType) {\r\n    case 'query':\r\n      return `${pascalCase(operationName)}Query`;\r\n      break;\r\n    case 'mutation':\r\n      return `${pascalCase(operationName)}Mutation`;\r\n      break;\r\n    case 'subscription':\r\n      return `${pascalCase(operationName)}Subscription`;\r\n      break;\r\n    default:\r\n      throw new GraphQLError(`Unsupported operation type \"${operationType}\"`);\r\n  }\r\n}\r\n\r\nexport function interfaceVariablesDeclarationForOperation(\r\n  generator,\r\n  {\r\n    operationName,\r\n    operationType,\r\n    variables,\r\n    fields,\r\n    fragmentsReferenced,\r\n    source,\r\n  }\r\n) {\r\n  if (!variables || variables.length < 1) {\r\n    return null;\r\n  }\r\n  const interfaceName = `${interfaceNameFromOperation({operationName, operationType})}Variables`;\r\n\r\n  typeDeclaration(generator, {\r\n    interfaceName,\r\n  }, () => {\r\n    const properties = propertiesFromFields(generator.context, variables);\r\n    propertyDeclarations(generator, properties, true);\r\n  });\r\n}\r\n\r\nexport function typeDeclarationForOperation(\r\n  generator,\r\n  {\r\n    operationName,\r\n    operationType,\r\n    variables,\r\n    fields,\r\n    fragmentSpreads,\r\n    fragmentsReferenced,\r\n    source,\r\n  }\r\n) {\r\n  const interfaceName = interfaceNameFromOperation({operationName, operationType});\r\n  typeDeclaration(generator, {\r\n    interfaceName,\r\n    extendTypes: fragmentSpreads ? fragmentSpreads.map(f => `${pascalCase(f)}Fragment`) : null,\r\n  }, () => {\r\n    const properties = propertiesFromFields(generator.context, fields);\r\n    propertyDeclarations(generator, properties, true);\r\n  });\r\n}\r\n\r\nexport function typeDeclarationForFragment(\r\n  generator,\r\n  {\r\n    fragmentName,\r\n    typeCondition,\r\n    fields,\r\n    inlineFragments,\r\n    fragmentSpreads,\r\n    source,\r\n  }\r\n) {\r\n  const interfaceName = `${pascalCase(fragmentName)}Fragment`;\r\n\r\n  typeDeclaration(generator, {\r\n    interfaceName,\r\n    extendTypes: fragmentSpreads ? fragmentSpreads.map(f => `${pascalCase(f)}Fragment`) : null,\r\n  }, () => {\r\n    const properties = propertiesFromFields(generator.context, fields)\r\n    .concat(...(inlineFragments || []).map(fragment =>\r\n      propertiesFromFields(generator.context, fragment.fields, true)\r\n    ));\r\n\r\n    propertyDeclarations(generator, properties, true);\r\n  });\r\n}\r\n\r\nexport function propertiesFromFields(context, fields, forceNullable) {\r\n  return fields.map(field => propertyFromField(context, field, forceNullable));\r\n}\r\n\r\nexport function propertyFromField(context, field, forceNullable) {\r\n  let { name: fieldName, type: fieldType, description, fragmentSpreads, inlineFragments } = field;\r\n  fieldName = fieldName || field.responseName;\r\n\r\n  const propertyName = fieldName;\r\n\r\n  let property = { fieldName, fieldType, propertyName, description };\r\n\r\n  const namedType = getNamedType(fieldType);\r\n\r\n  if (isCompositeType(namedType)) {\r\n    const bareTypeName = pascalCase(Inflector.singularize(propertyName));\r\n    const typeName = typeNameFromGraphQLType(context, fieldType, bareTypeName);\r\n    let isArray = false;\r\n    if (fieldType instanceof GraphQLList) {\r\n      isArray = true;\r\n    }\r\n    let isNullable = true;\r\n    if (fieldType instanceof GraphQLNonNull && !forceNullable) {\r\n      isNullable = false;\r\n    }\r\n    return {\r\n      ...property,\r\n      typeName, bareTypeName, fields: field.fields, isComposite: true, fragmentSpreads, inlineFragments, fieldType,\r\n      isArray, isNullable,\r\n    };\r\n  } else {\r\n    const typeName = typeNameFromGraphQLType(context, fieldType);\r\n    return { ...property, typeName, isComposite: false, fieldType };\r\n  }\r\n}\r\n\r\nexport function propertyDeclarations(generator, properties, inInterface) {\r\n  if (!properties) return;\r\n  properties.forEach(property => {\r\n    if (property.fields && property.fields.length > 0 || property.inlineFragments && property.inlineFragments.length > 0) {\r\n      propertyDeclaration(generator, {...property, inInterface}, () => {\r\n        const properties = propertiesFromFields(generator.context, property.fields)\r\n        .concat(...(property.inlineFragments || []).map(fragment =>\r\n          propertiesFromFields(generator.context, fragment.fields, true)\r\n        ));\r\n        propertyDeclarations(generator, properties);\r\n      });\r\n    } else {\r\n      propertyDeclaration(generator, {...property, inInterface});\r\n    }\r\n  });\r\n}\r\n"]}