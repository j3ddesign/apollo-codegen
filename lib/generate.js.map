{"version":3,"sources":["../src/generate.js"],"names":["generate","inputPaths","schemaPath","outputPath","target","options","schema","document","context","output","writeFileSync","console","log"],"mappings":";;;;;;;;;;kBAWwBA,Q;;AAXxB;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AAEe,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,UAA9B,EAA0CC,UAA1C,EAAsDC,MAAtD,EAA8DC,OAA9D,EAAuE;AACpF,QAAMC,SAAS,yBAAWJ,UAAX,CAAf;;AAEA,QAAMK,WAAW,yCAA2BN,UAA3B,CAAjB;;AAEA,yCAAsBK,MAAtB,EAA8BC,QAA9B;;AAEA,QAAMC,UAAU,8BAAYF,MAAZ,EAAoBC,QAApB,CAAhB;AACA,wBAAcC,OAAd,EAAuBH,OAAvB;;AAEA,MAAII,MAAJ;AACA,UAAQL,MAAR;AACE,SAAK,MAAL;AACEK,eAAS,+BAAgBD,OAAhB,CAAT;AACA;AACF,SAAK,IAAL;AACA,SAAK,YAAL;AACEC,eAAS,gCAAyBD,OAAzB,CAAT;AACA;AACF,SAAK,MAAL;AACEC,eAAS,0BAAmBD,OAAnB,CAAT;AACA;AACF,SAAK,OAAL;AACA;AACEC,eAAS,2BAAoBD,OAApB,CAAT;AACA;AAdJ;;AAiBA,MAAIL,UAAJ,EAAgB;AACd,iBAAGO,aAAH,CAAiBP,UAAjB,EAA6BM,MAA7B;AACD,GAFD,MAEO;AACLE,YAAQC,GAAR,CAAYH,MAAZ;AACD;AACF","file":"generate.js","sourcesContent":["import fs from 'fs'\r\n\r\nimport { ToolError, logError } from './errors'\r\nimport { loadSchema,  loadAndMergeQueryDocuments } from './loading'\r\nimport { validateQueryDocument } from './validation'\r\nimport { compileToIR } from './compilation'\r\nimport serializeToJSON from './serializeToJSON'\r\nimport { generateSource as generateSwiftSource } from './swift'\r\nimport { generateSource as generateTypescriptSource } from './typescript'\r\nimport { generateSource as generateFlowSource } from './flow'\r\n\r\nexport default function generate(inputPaths, schemaPath, outputPath, target, options) {\r\n  const schema = loadSchema(schemaPath);\r\n\r\n  const document = loadAndMergeQueryDocuments(inputPaths);\r\n\r\n  validateQueryDocument(schema, document);\r\n\r\n  const context = compileToIR(schema, document);\r\n  Object.assign(context, options);\r\n\r\n  let output;\r\n  switch (target) {\r\n    case 'json':\r\n      output = serializeToJSON(context);\r\n      break;\r\n    case 'ts':\r\n    case 'typescript':\r\n      output = generateTypescriptSource(context);\r\n      break;\r\n    case 'flow':\r\n      output = generateFlowSource(context);\r\n      break;\r\n    case 'swift':\r\n    default:\r\n      output = generateSwiftSource(context);\r\n      break;\r\n  }\r\n\r\n  if (outputPath) {\r\n    fs.writeFileSync(outputPath, output);\r\n  } else {\r\n    console.log(output);\r\n  }\r\n}\r\n"]}