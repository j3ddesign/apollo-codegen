{"version":3,"sources":["../src/generate.js"],"names":["generate","inputPaths","schemaPath","outputPath","target","options","schema","then","document","console","log","context","output","writeFileSync"],"mappings":";;;;;;;;;;kBAWwBA,Q;;AAXxB;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AAEe,SAASA,QAAT,CAAkBC,UAAlB,EAA8BC,UAA9B,EAA0CC,UAA1C,EAAsDC,MAAtD,EAA8DC,OAA9D,EAAuE;AACpF,QAAMC,SAAS,yBAAWJ,UAAX,CAAf;;AAEA,2CAA2BD,UAA3B,EAAuCM,IAAvC,CAA4CC,YAAY;AACtDC,YAAQC,GAAR,CAAY,cAAZ,EAA4BF,QAA5B;AACA,2CAAsBF,MAAtB,EAA8BE,QAA9B;;AAEA,UAAMG,UAAU,8BAAYL,MAAZ,EAAoBE,QAApB,CAAhB;AACA,0BAAcG,OAAd,EAAuBN,OAAvB;;AAEA,QAAIO,MAAJ;AACA,YAAQR,MAAR;AACE,WAAK,MAAL;AACEQ,iBAAS,+BAAgBD,OAAhB,CAAT;AACA;AACF,WAAK,IAAL;AACA,WAAK,YAAL;AACEC,iBAAS,gCAAyBD,OAAzB,CAAT;AACA;AACF,WAAK,MAAL;AACEC,iBAAS,0BAAmBD,OAAnB,CAAT;AACA;AACF,WAAK,OAAL;AACA;AACEC,iBAAS,2BAAoBD,OAApB,CAAT;AACA;AAdJ;;AAiBA,QAAIR,UAAJ,EAAgB;AACd,mBAAGU,aAAH,CAAiBV,UAAjB,EAA6BS,MAA7B;AACD,KAFD,MAEO;AACLH,cAAQC,GAAR,CAAYE,MAAZ;AACD;AACF,GA9BD;AA+BD","file":"generate.js","sourcesContent":["import fs from 'fs'\r\n\r\nimport { ToolError, logError } from './errors'\r\nimport { loadSchema, loadAndMergeQueryDocuments } from './loading'\r\nimport { validateQueryDocument } from './validation'\r\nimport { compileToIR } from './compilation'\r\nimport serializeToJSON from './serializeToJSON'\r\nimport { generateSource as generateSwiftSource } from './swift'\r\nimport { generateSource as generateTypescriptSource } from './typescript'\r\nimport { generateSource as generateFlowSource } from './flow'\r\n\r\nexport default function generate(inputPaths, schemaPath, outputPath, target, options) {\r\n  const schema = loadSchema(schemaPath);\r\n\r\n  loadAndMergeQueryDocuments(inputPaths).then(document => {\r\n    console.log('got document', document);\r\n    validateQueryDocument(schema, document);\r\n\r\n    const context = compileToIR(schema, document);\r\n    Object.assign(context, options);\r\n\r\n    let output;\r\n    switch (target) {\r\n      case 'json':\r\n        output = serializeToJSON(context);\r\n        break;\r\n      case 'ts':\r\n      case 'typescript':\r\n        output = generateTypescriptSource(context);\r\n        break;\r\n      case 'flow':\r\n        output = generateFlowSource(context);\r\n        break;\r\n      case 'swift':\r\n      default:\r\n        output = generateSwiftSource(context);\r\n        break;\r\n    }\r\n\r\n    if (outputPath) {\r\n      fs.writeFileSync(outputPath, output);\r\n    } else {\r\n      console.log(output);\r\n    }\r\n  });\r\n}\r\n"]}