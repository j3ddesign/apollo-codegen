{"version":3,"sources":["../src/loading.js"],"names":["loadSchema","loadAndMergeQueryDocuments","schemaPath","existsSync","schemaData","require","data","__schema","inputPaths","getFileNames","resolve","reject","allFiles","checking","length","forEach","path","err","files","Error","then","console","log","sources","map","inputPath","body","readFileSync","filter","source","catch","e","error"],"mappings":";;;;;;;;;;;;;;QAegBA,U,GAAAA,U;QAYAC,0B,GAAAA,0B;;AA3BhB;;;;AACA;;;;AACA;;;;AAEA;;AAOA;;;;AAEA;;;;AAEO,SAASD,UAAT,CAAoBE,UAApB,EAAgC;AACrC,MAAI,CAAC,aAAGC,UAAH,CAAcD,UAAd,CAAL,EAAgC;AAC9B,UAAM,sBAAe,oCAAmCA,UAAW,EAA7D,CAAN;AACD;AACD,QAAME,aAAaC,QAAQH,UAAR,CAAnB;;AAEA,MAAI,CAACE,WAAWE,IAAZ,IAAoB,CAACF,WAAWG,QAApC,EAA8C;AAC5C,UAAM,sBAAc,+EAAd,CAAN;AACD;AACD,SAAO,gCAAmBH,WAAWE,IAAZ,GAAoBF,WAAWE,IAA/B,GAAsCF,UAAxD,CAAP;AACD;;AAEM,SAASH,0BAAT,CAAoCO,UAApC,EAAgD;AACrD,QAAMC,eAAgBD,UAAD,IAAgB;AACnC,WAAO,sBAAY,CAACE,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,WAAW,EAAf;AACA,UAAIC,WAAWL,WAAWM,MAA1B;AACAN,iBAAWO,OAAX,CAAmBC,QAAQ;AACzB,4BAAKA,IAAL,EAAW,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACzB,cAAID,GAAJ,EAAS,MAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACTL,gEAAeA,QAAf,oCAA4BM,KAA5B;AACAL;AACA,cAAI,CAACA,QAAL,EAAe;AACbH,oBAAQE,QAAR;AACD;AACF,SAPD;AAQD,OATD;AAUD,KAbM,CAAP;AAcD,GAfD;AAgBA,SAAOH,aAAaD,UAAb,EACJY,IADI,CACEF,KAAD,IAAW;AACjBG,YAAQC,GAAR,CAAY,aAAZ,EAA2BJ,KAA3B;AACE,UAAMK,UAAUL,MAAMM,GAAN,CAAUR,QAAQ;AAChC,YAAMS,YAAYT,IAAlB;AACA,YAAMU,OAAO,aAAGC,YAAH,CAAgBF,SAAhB,EAA2B,MAA3B,CAAb;AACA,UAAI,CAACC,IAAL,EAAW;AACT,eAAO,IAAP;AACD;AACD,aAAO,oBAAWA,IAAX,EAAiBD,SAAjB,CAAP;AACD,KAPe,EAObG,MAPa,CAONC,UAAUA,MAPJ,CAAhB;AAQA,WAAO,wBAAUN,QAAQC,GAAR,CAAYK,UAAU,oBAAMA,MAAN,CAAtB,CAAV,CAAP;AACD,GAZI,EAaJC,KAbI,CAaEC,KAAKV,QAAQW,KAAR,CAAcD,CAAd,CAbP,CAAP;AAcD","file":"loading.js","sourcesContent":["import path from 'path'\r\nimport fs from 'fs'\r\nimport mkdirp from 'mkdirp'\r\n\r\nimport {\r\n  buildClientSchema,\r\n  Source,\r\n  concatAST,\r\n  parse\r\n} from 'graphql';\r\n\r\nimport glob from 'glob';\r\n\r\nimport { ToolError, logError } from './errors'\r\n\r\nexport function loadSchema(schemaPath) {\r\n  if (!fs.existsSync(schemaPath)) {\r\n    throw new ToolError(`Cannot find GraphQL schema file: ${schemaPath}`);\r\n  }\r\n  const schemaData = require(schemaPath);\r\n\r\n  if (!schemaData.data && !schemaData.__schema) {\r\n    throw new ToolError('GraphQL schema file should contain a valid GraphQL introspection query result');\r\n  }\r\n  return buildClientSchema((schemaData.data) ? schemaData.data : schemaData);\r\n}\r\n\r\nexport function loadAndMergeQueryDocuments(inputPaths) {\r\n  const getFileNames = (inputPaths) => {\r\n    return new Promise((resolve, reject) => {\r\n      let allFiles = [];\r\n      let checking = inputPaths.length;\r\n      inputPaths.forEach(path => {\r\n        glob(path, (err, files) => {\r\n          if (err) throw new Error(err);\r\n          allFiles = [...allFiles, ...files];\r\n          checking--;\r\n          if (!checking) {\r\n            resolve(allFiles);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  };\r\n  return getFileNames(inputPaths)\r\n    .then((files) => {\r\n    console.log('got files: ', files);\r\n      const sources = files.map(path => {\r\n        const inputPath = path;\r\n        const body = fs.readFileSync(inputPath, 'utf8');\r\n        if (!body) {\r\n          return null;\r\n        }\r\n        return new Source(body, inputPath);\r\n      }).filter(source => source);\r\n      return concatAST(sources.map(source => parse(source)));\r\n    })\r\n    .catch(e => console.error(e));\r\n}\r\n"]}