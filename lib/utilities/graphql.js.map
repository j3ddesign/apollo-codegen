{"version":3,"sources":["../../src/utilities/graphql.js"],"names":["sourceAt","filePathForNode","valueFromValueNode","isTypeProperSuperTypeOf","getOperationRootType","getFieldDef","location","source","body","slice","start","end","node","name","loc","undefined","valueNode","kind","Number","value","values","map","fields","reduce","object","field","variableName","schema","maybeSuperType","subType","isPossibleType","operation","getQueryType","mutationType","getMutationType","GraphQLError","subscriptionType","getSubscriptionType","parentType","fieldAST","getFields"],"mappings":"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","file":"graphql.js","sourcesContent":["import {\r\n  isEqualType,\r\n  isTypeSubTypeOf,\r\n  isAbstractType,\r\n  SchemaMetaFieldDef,\r\n  TypeMetaFieldDef,\r\n  TypeNameMetaFieldDef,\r\n  GraphQLObjectType,\r\n  GraphQLInterfaceType,\r\n  GraphQLUnionType,\r\n  GraphQLEnumType\r\n} from 'graphql';\r\n\r\nexport function sourceAt(location) {\r\n  return location.source.body.slice(location.start, location.end);\r\n}\r\n\r\nexport function filePathForNode(node) {\r\n  const name = node.loc.source && node.loc.source.name;\r\n  return (name === \"GraphQL\") ? undefined : name;\r\n}\r\n\r\nexport function valueFromValueNode(valueNode) {\r\n  const kind = valueNode.kind;\r\n\r\n  if (kind === 'IntValue' || kind === 'FloatValue') {\r\n    return Number(valueNode.value);\r\n  } else if (kind === 'NullValue') {\r\n    return null;\r\n  } else if (kind === 'ListValue') {\r\n    return valueNode.values.map(valueFromValueNode);\r\n  } else if (kind === 'ObjectValue') {\r\n    return valueNode.fields.reduce((object, field) => {\r\n      object[field.name.value] = valueFromValueNode(field.value);\r\n      return object;\r\n    }, {});\r\n  } else if (kind === 'Variable') {\r\n    return { kind, variableName: valueNode.name.value };\r\n  } else {\r\n    return valueNode.value;\r\n  }\r\n}\r\n\r\nexport function isTypeProperSuperTypeOf(schema, maybeSuperType, subType) {\r\n  return isEqualType(maybeSuperType, subType) || (isAbstractType(maybeSuperType) && schema.isPossibleType(maybeSuperType, subType));\r\n}\r\n\r\n// Utility functions extracted from graphql-js\r\n\r\n/**\r\n * Extracts the root type of the operation from the schema.\r\n */\r\nexport function getOperationRootType(schema, operation) {\r\n  switch (operation.operation) {\r\n    case 'query':\r\n      return schema.getQueryType();\r\n    case 'mutation':\r\n      const mutationType = schema.getMutationType();\r\n      if (!mutationType) {\r\n        throw new GraphQLError(\r\n          'Schema is not configured for mutations',\r\n          [operation]\r\n        );\r\n      }\r\n      return mutationType;\r\n    case 'subscription':\r\n      const subscriptionType = schema.getSubscriptionType();\r\n      if (!subscriptionType) {\r\n        throw new GraphQLError(\r\n          'Schema is not configured for subscriptions',\r\n          [operation]\r\n        );\r\n      }\r\n      return subscriptionType;\r\n    default:\r\n      throw new GraphQLError(\r\n        'Can only compile queries, mutations and subscriptions',\r\n        [operation]\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Not exactly the same as the executor's definition of getFieldDef, in this\r\n * statically evaluated environment we do not always have an Object type,\r\n * and need to handle Interface and Union types.\r\n */\r\nexport function getFieldDef(schema, parentType, fieldAST) {\r\n  const name = fieldAST.name.value;\r\n  if (name === SchemaMetaFieldDef.name &&\r\n      schema.getQueryType() === parentType) {\r\n    return SchemaMetaFieldDef;\r\n  }\r\n  if (name === TypeMetaFieldDef.name &&\r\n      schema.getQueryType() === parentType) {\r\n    return TypeMetaFieldDef;\r\n  }\r\n  if (name === TypeNameMetaFieldDef.name &&\r\n      (parentType instanceof GraphQLObjectType ||\r\n       parentType instanceof GraphQLInterfaceType ||\r\n       parentType instanceof GraphQLUnionType)\r\n  ) {\r\n    return TypeNameMetaFieldDef;\r\n  }\r\n  if (parentType instanceof GraphQLObjectType ||\r\n      parentType instanceof GraphQLInterfaceType) {\r\n    return parentType.getFields()[name];\r\n  }\r\n}\r\n"]}